module Main where

import Day1 (day1)
import Day10 (day10)
import Day11 (day11)
import Day12 (day12)
import Day13 (day13)
import Day14 (day14)
import Day15 (day15)
import Day16 (day16)
import Day17 (day17)
import Day18 (day18)
import Day19 (day19)
import Day2 (day2)
import Day20 (day20)
import Day21 (day21)
import Day22 (day22)
import Day23 (day23)
import Day24 (day24)
import Day25 (day25)
import Day3 (day3)
import Day4 (day4)
import Day5 (day5)
import Day6 (day6)
import Day7 (day7)
import Day8 (day8)
import Day9 (day9)
import Solution (Input (..), executeSolution)
import System.Environment (getArgs)

main :: IO ()
main = do
  day <- head <$> getArgs
  case day of
    "1" -> executeSolution day1 (FileInput "day1.txt")
    "2" -> executeSolution day2 (FileInput "day2.txt")
    "3" -> executeSolution day3 (FileInput "day3.txt")
    "4" -> executeSolution day4 (FileInput "day4.txt")
    "5" -> executeSolution day5 (FileInput "day5.txt")
    "6" -> executeSolution day6 (FileInput "day6.txt")
    "7" -> executeSolution day7 (FileInput "day7.txt")
    "8" -> executeSolution day8 (FileInput "day8.txt")
    "9" -> executeSolution day9 (FileInput "day9.txt")
    "10" -> executeSolution day10 (FileInput "day10.txt")
    "11" -> executeSolution day11 (FileInput "day11.txt")
    "12" -> executeSolution day12 (FileInput "day12.txt")
    "13" -> executeSolution day13 (FileInput "day13.txt")
    "14" -> executeSolution day14 (FileInput "day14.txt")
    "15" -> executeSolution day15 (FileInput "day15.txt")
    "16" -> executeSolution day16 (FileInput "day16.txt")
    "17" -> executeSolution day17 (FileInput "day17.txt")
    "18" -> executeSolution day18 (FileInput "day18.txt")
    "19" -> executeSolution day19 (FileInput "day19.txt")
    "20" -> executeSolution day20 (FileInput "day20.txt")
    "21" -> executeSolution day21 (FileInput "day21.txt")
    "22" -> executeSolution day22 (FileInput "day22.txt")
    "23" -> executeSolution day23 (FileInput "day23.txt")
    "24" -> executeSolution day24 (FileInput "day24.txt")
    "25" -> executeSolution day25 (FileInput "day25.txt")
    _ -> error $ "Invalid day: " ++ day
